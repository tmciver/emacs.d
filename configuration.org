#+TITLE: Emacs Configuration

* use-package initialization

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq package-archives '(("org" . "https://orgmode.org/elpa/")
			   ("gnu" . "https://elpa.gnu.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")))

  ;; initialize built-in package management
  (package-initialize)

  ;; update packages list if we are on a new install
  (unless package-archive-contents
    (package-refresh-contents))

  (require 'use-package)

  (setq my-packages '(use-package use-package-ensure gnu-elpa-keyring-update))
  (dolist (package my-packages)
    (unless (package-installed-p 'use-package)
      (package-install 'use-package)))

  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC

* Global Settings
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :config (smartparens-global-mode 1))
(global-auto-revert-mode 1)
#+END_SRC

Smooth scrolling.
#+BEGIN_SRC emacs-lisp
(setq scroll-step 1
      scroll-conservatively 10000)
#+END_SRC

Bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

Mouse scrolling
#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
(setq mouse-wheel-progressive-speed nil)
#+END_SRC

Truncating Long Lines
#+BEGIN_SRC emacs-lisp
(set-default 'truncate-lines t)
#+END_SRC

Autocomplete
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :config (global-auto-complete-mode t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq-default column-number-mode t)
#+END_SRC

Fill column stuff
#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
  :config (setq-default auto-fill-mode t)
          (setq-default fill-column 80))
#+END_SRC

RevealJS
#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC

Custom
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(js-indent-level 8))
#+END_SRC

org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (require 'org-tempo)
					  ;    (require 'ox-reveal)
    )
#+END_SRC

Ace Jump Mode
#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
 :bind ("C-." . ace-jump-mode))
#+END_SRC

Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :config (progn
	      (treemacs-git-mode 'simple)
	      ;;(treemacs-hide-gitignored-files-mode t)
	      )
    :bind ("M-0" . treemacs-select-window))

  (use-package treemacs-projectile
    :after (treemacs projectile))
#+end_src

Which-key
#+begin_src emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+end_src

* Theming
#+BEGIN_SRC emacs-lisp
(load-theme 'tango-dark t)
#+END_SRC

* Language Settings
** All Programming Languages
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))

  (use-package projectile)

  (use-package paredit
    :hook ((clojure-mode scheme-mode lisp-mode lisp-interaction-mode emacs-lisp-mode org-mode) . paredit-mode))

  (use-package yasnippet
    :config (yas-reload-all)
    :hook (prog-mode . (lambda ()
                         (linum-mode t)
                         (subword-mode t)
                         (global-flycheck-mode t)
                         (yas-minor-mode t)
                         (projectile-mode +1))))

  ;; Language Server Protocol (LSP)
  (use-package lsp-mode
    :init (progn
           (setq lsp-headerline-breadcrumb-enable nil)
           (setq lsp-keymap-prefix "s-k"))
    :hook (prog-mode . lsp-mode)
    :commands lsp
    :bind (("M-." . lsp-find-definition)))
  ;;(require 'lsp-clients)
  ;;(require 'lsp-ui)
  ;;(add-hook 'lsp-mode-hook 'lsp-ui-mode)
  ;;(add-hook 'lsp-mode-hook 'lsp-enable-imenu)

  (use-package lsp-ui
    :hook (prog-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-doc-position 'bottom))

  (use-package magit)

  (use-package dockerfile-mode
    :init (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+END_SRC

** Clojure
#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :hook (clojure-mode . (lambda ()
			  (show-paren-mode t)
			  (fci-mode 1)
			  (setq fci-rule-width 1)
			  (setq fci-rule-color "darkblue"))))
#+END_SRC

** Binary
#+BEGIN_SRC emacs-lisp
;; hexl mode for binary files
(add-to-list 'auto-mode-alist '("\\.bin$" . hexl-mode))
#+END_SRC

** Nix
   #+begin_src emacs-lisp
     (use-package nix-mode)
   #+end_src

** Octave
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.m$" . octave-mode))
#+END_SRC

** PHP
#+BEGIN_SRC emacs-lisp
(use-package php-mode
  :hook (php-mode . (lambda ()
                        (setq c-basic-offset 2)
			(c-set-offset 'case-label '+) ;; used for properly indenting switch statements.
			;;(lsp)
			)))
#+END_SRC

** Purescript
#+BEGIN_SRC emacs-lisp
(use-package purescript-mode
  :hook (purescript-mode . turn-on-purescript-indentation))
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
(use-package lsp-python-ms
  :hook (python-mode . (lambda ()
                         (require 'lsp-python-ms)
                         (setq indent-tabs-mode t)
                         (setq python-indent-offset 4)
                         (setq tab-width 4)
                         ;;(setq c-basic-offset 2)
                         ;;(c-set-offset 'case-label '+) ;; used for properly indenting switch statements.
                         (lsp))))
(setq lsp-python-ms-executable
      "~/python-language-server/output/bin/Release/linux-x64/publish/Microsoft.Python.LanguageServer")
#+END_SRC
   
** HTML
#+BEGIN_SRC emacs-lisp
(setq html-helper-build-new-buffer t)
#+END_SRC

** CSS
#+BEGIN_SRC emacs-lisp
(add-hook 'css-mode-hook
  (lambda ()
    (setq css-indent-offset 2)
    (setq indent-tabs-mode nil)))
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :hook ((haskell-mode . (lambda ()
                           (turn-on-haskell-indentation)
                           (interactive-haskell-mode)
			   (custom-set-variables '(haskell-tags-on-save t))))
         (haskell-cabal-mode . (lambda ()
                                 (setq indent-tabs-mode nil))))
  :bind (([f8] . haskell-navigate-imports)
         ("C-c C-l" . 'haskell-process-load-or-reload)
         ("C-c C-z" . 'haskell-interactive-switch)
         ("C-c C-n C-t" . 'haskell-process-do-type)
         ("C-c C-n C-i" . 'haskell-process-do-info)
         ("C-c C-n C-c" . 'haskell-process-cabal-build)
         ("C-c C-n c" . 'haskell-process-cabal)
	 ("M-." . 'haskell-mode-jump-to-def-or-tag)))

(use-package lsp-haskell
  :defer t
  :init
  (add-hook 'haskell-mode-hook
            (lambda ()
	      (let ((cabal-path (expand-file-name "~/.cabal/bin"))
	            (ghcup-path (expand-file-name "~/.ghcup/bin")))
		(add-to-list 'exec-path cabal-path)
		(add-to-list 'exec-path ghcup-path))
		(lsp)))
  (add-hook 'haskell-literate-mode-hook #'lsp))

(custom-set-variables '(haskell-process-type 'stack-ghci))

;;(require 'ghcid)

(font-lock-add-keywords
 'haskell-mode
 '(("-- \\(FIXME\\|TODO\\):" 1 font-lock-warning-face t)
   ;; undefined could be improved with a look ahead a la elisp
   ("[^(-- )][a-zA-Z]* \\(undefined\\)$" 1 font-lock-warning-face t)))

#+END_SRC

** Elm
   #+begin_src emacs-lisp
     (use-package elm-mode
       :config
       (setq indent-tabs-mode nil)
       (message "config hook executing . . .")
       (setq elm-tags-on-save t))
   #+end_src

** Scala
#+BEGIN_SRC emacs-lisp
;;(require 'scala-mode2)
(add-to-list 'auto-mode-alist '("\\.scala$" . scala-mode))
(add-hook 'scala-mode-hook '(lambda ()
			      (setq indent-tabs-mode nil)))
#+END_SRC

** Typescript
#+BEGIN_SRC emacs-lisp
;; (defun setup-tide-mode ()
;;   (interactive)
;;   (tide-setup)
;;   (flycheck-mode +1)
;;   (setq flycheck-check-syntax-automatically '(save mode-enabled))
;;   (eldoc-mode +1)
;;   (tide-hl-identifier-mode +1)
;;   (company-mode +1)
;;   (lsp))
;;(add-hook 'typescript-mode-hook #'setup-tide-mode)

;; Add nvm directory to `exec-path` so that lsp-mode can find the
;; Javascript/Typescript language server (javascript-typescript-stdio)
(setq exec-path (append exec-path '("/home/tim/.nvm/versions/node/v11.1.0/bin")))
(setenv "PATH" (concat "/home/tim/.nvm/versions/node/v11.1.0/bin:" (getenv "PATH")))

(setq lsp-clients-typescript-server "typescript-language-server")
(setq lsp-clients-typescript-server-args '("--stdio"))

(add-hook 'typescript-mode-hook 'lsp)
#+END_SRC

** JasmineJS
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :init (custom-set-variables '(markdown-command "pandoc"))
  :hook (markdown-mode . (lambda ()
                           (fci-mode t)
                           (auto-fill-mode t))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'jasminejs-mode-hook (lambda () (jasminejs-add-snippets-to-yas-snippet-dirs)))
#+END_SRC

** Graphviz
#+BEGIN_SRC emacs-lisp
(use-package graphviz-dot-mode)
#+END_SRC

** YAML
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode)
#+END_SRC

* Miscellaneous
** Multiple Cursors
   #+begin_src emacs-lisp
     (use-package multiple-cursors
       :bind ("C->" . mc/mark-next-like-this))
   #+end_src
