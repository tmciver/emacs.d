#+TITLE: Emacs Configuration

* package.el initialization

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (package-initialize)
#+END_SRC

* Global Settings
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
(smartparens-global-mode 1)
(setq-default truncate-lines t)
#+END_SRC

Smooth scrolling.
#+BEGIN_SRC emacs-lisp
(setq scroll-step 1
      scroll-conservatively 10000)
#+END_SRC

Bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

Mouse scrolling
#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
(setq mouse-wheel-progressive-speed nil)
#+END_SRC

Autocomplete
#+BEGIN_SRC emacs-lisp
(require 'auto-complete)
(require 'auto-complete-config)
(global-auto-complete-mode t)
(ac-config-default)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq-default column-number-mode t)
#+END_SRC

Fill column stuff
#+BEGIN_SRC emacs-lisp
(require 'fill-column-indicator)
(setq-default auto-fill-mode t)
(setq-default fill-column 80)
#+END_SRC

Custom
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(js-indent-level 8))
#+END_SRC

org S5
#+BEGIN_SRC emacs-lisp
;; (require 'org-export-as-s5)
#+END_SRC

* Theming
#+BEGIN_SRC emacs-lisp
(load-theme 'tango-dark t)
#+END_SRC

* Language Settings
** All Programming Languages
#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(yas-reload-all)
(add-hook 'prog-mode-hook (lambda ()
                            (linum-mode t)
                            (subword-mode t)
                            (global-flycheck-mode t)
                            (yas-minor-mode t)
                            (projectile-mode +1)))

;; Language Server Protocol (LSP)
(require 'lsp)
(require 'lsp-clients)
;;(require 'lsp-ui)
;;(add-hook 'lsp-mode-hook 'lsp-ui-mode)
(add-hook 'lsp-mode-hook 'lsp-enable-imenu)
#+END_SRC

** Clojure
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)

(require 'clojure-mode)
(add-hook 'clojure-mode-hook
	  '(lambda ()
	     (paredit-mode t)
	     (show-paren-mode t)
	     (fci-mode 1)
	     (setq fci-rule-width 1)
	     (setq fci-rule-color "darkblue")))
#+END_SRC

** Elisp
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook
	  (lambda ()
	    (paredit-mode)))
#+END_SRC

** NRepl
#+BEGIN_SRC emacs-lisp
(add-hook 'nrepl-mode-hook
	  (lambda ()
	    (paredit-mode)))
#+END_SRC

** Binary
#+BEGIN_SRC emacs-lisp
;; hexl mode for binary files
(add-to-list 'auto-mode-alist '("\\.bin$" . hexl-mode))
#+END_SRC

** Octave
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.m$" . octave-mode))
#+END_SRC

** PHP
#+BEGIN_SRC emacs-lisp
(add-hook 'php-mode-hook '(lambda ()
                           (setq c-basic-offset 2)
                           (c-set-offset 'case-label '+) ;; used for properly indenting switch statements.
                           (lsp)))
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
(require 'lsp-python-ms)
(setq lsp-python-ms-executable
      "~/python-language-server/output/bin/Release/linux-x64/publish/Microsoft.Python.LanguageServer")
(add-hook 'python-mode-hook '(lambda ()
                               (setq indent-tabs-mode t)
                               (setq python-indent-offset 4)
                               (setq tab-width 4)
                               ;;(setq c-basic-offset 2)
                               ;;(c-set-offset 'case-label '+) ;; used for properly indenting switch statements.
                               (lsp)
))
#+END_SRC
   
** HTML
#+BEGIN_SRC emacs-lisp
(setq html-helper-build-new-buffer t)
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
(add-hook 'haskell-cabal-mode-hook '(lambda ()
                                      (setq indent-tabs-mode nil)))

(font-lock-add-keywords
 'haskell-mode
 '(("-- \\(FIXME\\|TODO\\):" 1 font-lock-warning-face t)
   ;; undefined could be improved with a look ahead a la elisp
   ("[^(-- )][a-zA-Z]* \\(undefined\\)$" 1 font-lock-warning-face t)))
#+END_SRC

** Scala
#+BEGIN_SRC emacs-lisp
;;(require 'scala-mode2)
(add-to-list 'auto-mode-alist '("\\.scala$" . scala-mode))
(add-hook 'scala-mode-hook '(lambda ()
			      paredit-mode
			      (setq indent-tabs-mode nil)))
#+END_SRC

** Typescript
#+BEGIN_SRC emacs-lisp
;; (defun setup-tide-mode ()
;;   (interactive)
;;   (tide-setup)
;;   (flycheck-mode +1)
;;   (setq flycheck-check-syntax-automatically '(save mode-enabled))
;;   (eldoc-mode +1)
;;   (tide-hl-identifier-mode +1)
;;   (company-mode +1)
;;   (lsp))
;;(add-hook 'typescript-mode-hook #'setup-tide-mode)

;; Add nvm directory to `exec-path` so that lsp-mode can find the
;; Javascript/Typescript language server (javascript-typescript-stdio)
(setq exec-path (append exec-path '("/home/tim/.nvm/versions/node/v11.1.0/bin")))
(setenv "PATH" (concat "/home/tim/.nvm/versions/node/v11.1.0/bin:" (getenv "PATH")))

(setq lsp-clients-typescript-server "typescript-language-server")
(setq lsp-clients-typescript-server-args '("--stdio"))

(add-hook 'typescript-mode-hook 'lsp)
#+END_SRC

** JasmineJS
#+BEGIN_SRC emacs-lisp
(add-hook 'jasminejs-mode-hook (lambda () (jasminejs-add-snippets-to-yas-snippet-dirs)))
#+END_SRC

* Miscellaneous
;; refheap
#+BEGIN_SRC emacs-lisp
(setq refheap-user "tmciver")
(setq refheap-token "3501c201-ad54-4b7f-9f55-c41b83a297a1")
(put 'downcase-region 'disabled nil)
(custom-set-variables '(markdown-command "pandoc"))
#+END_SRC
